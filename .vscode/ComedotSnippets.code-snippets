{
	"Function": {
		"prefix": "func",
		"body": [
			"func ${1:name}() -> void:",
			"\t${2:pass}$0",
			"\n"
		],
		"description": "A basic function skeleton."
	},

	"Function with Return": {
		"prefix": "func",
		"body": [
			"func ${1:name}() -> ${2:Variant}:",
			"\t$0",
			"\treturn null",
			"\n"
		],
		"description": "A basic function skeleton that returns a value."
	},

	"Complex Function": {
		"prefix": "func",
		"body": [
			"## ${5:Documentation}",
			"func ${1:name}(${2:parameter: Type}) -> ${3:Variant}:",
			"\tif not ${4:isEnabled}: return null",
			"\t$0",
			"\treturn false",
			"\n"
		],
		"description": "A function skeleton with documentation, arguments, guard clause, and a return value."
	},

	"Ready Method": {
		"prefix": "ready",
		"body": [
			"func _ready() -> void:",
			"\t${1:pass}$0"
		],
		"description": "A Node's _ready() method."
	},

	"Void": {
		"prefix": "void",
		"body": [
			"-> void:",
			"\t$0"
		],
		"description": "Embrace the void."
	},

	"Export": {
		"prefix": "@export",
		"body": [ "@export var ${1:isFlagged}: ${2:bool} = ${3:false}" ],
		"description": "A basic export parameter."
	},

	"Export Range": {
		"prefix": "@export",
		"body": [ "@export_range(${4:0.0}, ${5:100.0}, ${6:10.0}) var ${1:speed}: ${2:float} = ${3:42.0}" ],
		"description": "An export parameter with a range."
	},

	"@onready Node Reference": {
		"prefix": "@onready",
		"body": [ "@onready var $0${1:propertyName}: ${2:NodeType} = ${3:$}${1:NodeName}" ],
		"description": "A property that references a Node with a $Name or %Unique name."
	},

	"Variable": {
		"prefix": "var",
		"body": ["var ${1:name}: ${2:type} = ${3:default}\n$0"],
		"description": "A variable definition with an explicit type."
	},

	"External Property": {
		"prefix": "varReturn",
		"body": [
			"var ${2:objectName}: ${3:objectType}:",
			"\tget: return ${1:objectParent}.$0${2:objectName}",
			"\n"
		],
		"description": "A property that returns another object's property."
	},

	"Component Dependency": {
		"prefix": "coComponent",
		"body": [ "@onready var $0${1:coComponent}: ${1:ComponentType} = coComponents.${1:ComponentType}\n" ],
		"description": "A property that searches for a sibling component and caches a reference to it."
	},

	"Component Reference": {
		"prefix": "varComponent",
		"body": [
			"var ${2:coComponent}: ${1:ComponentType} = self.coComponents.${1:ComponentType}",
			"${2:coComponent}.$0"
		],
		"description": "A variable that stores a reference to a sibling component."
	},

	"Property Getter": {
		"prefix": "get",
		"body": [ "get: return $0" ],
		"description": "A property getter stub."
	},

	"Property Setter": {
		"prefix": "set",
		"body": [
			"set(newValue):",
			"\t${1:property} = newValue$0"
		],
		"description": "A property setter stub."
	},

	"Property Setter If New": {
		"prefix": "setNew",
		"body": [
			"set(newValue):",
			"\tif newValue != ${1:property}:",
			"\t\t${1:property} = newValue\n\t\t$0"
		],
		"description": "A property setter which only updates a variable if the new value is different."
	},

	"Property Setter If New with Log": {
		"prefix": "setNewLog",
		"body": [
			"set(newValue):",
			"\tif newValue != ${1:property}:",
			"\t\tif debugMode: Debug.printChange(\"${1:property}\", ${1:property}, newValue)",
			"\t\t${1:property} = newValue\n\t\t$0"
		],
		"description": "A property setter which only updates a variable if the new value is different and prints a log of the change."
	},
	
	"Lazy Property": {
		"prefix": "lazyVar",
		"body": [
			"var ${1:lazyProperty}: ${2:PackedScene}:",
			"\tget:",
			"\t\tif not ${1:lazyProperty}: ${1:lazyProperty} = ${3:load(\"res://$0Scene.tscn\")}",
			"\t\treturn ${1:lazyProperty}\n"
		],
		"description": "A property which is initialized only when it is accessed."
	},

	"Signal Connection": {
		"prefix": "connect",
		"body": [ 
			"Tools.connectSignal(${1}.${2}, self.${3:on${1}_${2}})\n\n",
			"${0:func $3() -> void:\n\tpass}"
		],
		"description": "A safe signal connector and a function to handle the signal."
	},

	"Stat": {
		"prefix": "stat",
		"body": [ "statsComponent.getStat(&\"${1:health}\").$0" ],
		"description": "Quick access to a StatsComponent."
	},

	"SelfCast": {
		"prefix": "selfAs",
		"body": [ "var selfAs${1:Type}: ${1} = self.get_node(^\".\") as ${1}$0" ],
		"description": "Store reference to self casted as a different type."
	},

	"Debug Variables": {
		"prefix": "debugVar",
		"body": [ "Debug.printVariables([${1:self}]) # DEBUG: DONTCOMMIT$0" ],
		"description": "Print multiple variable values for runtime debugging."
	},

	"Debug Trace": {
		"prefix": "trace",
		"body": [ "Debug.printTrace([${1:variables}], self) # DEBUG: DONTCOMMIT$0" ],
		"description": "Print multiple variable values along with the recent function calls for runtime debugging."
	},

	"Debug Info": {
		"prefix": "showDebugInfo",
		"body": [
			"func showDebugInfo() -> void:",
			"\tif not debugMode: return",
			"\tDebug.watchList[str(\"\\n â€”\", parentEntity.name, \".\", self.name)] = \"\"",
			"\tDebug.watchList.$0"
		],
		"description": "A template for a showDebugInfo() method."
	},
	
	"Region": {
		"prefix": "region",
		"body": [
			"#region ${1:Title}",
			"$0",
			"#endregion\n\n"
		],
		"description": "A code region."
	},

	"Animation Function": {
		"prefix": "animationFunc",
		"body": [
			"static func ${1:animate}(node: CanvasItem, duration: float = ${2:1.0}) -> Tween:",
			"\tvar tween: Tween = node.create_tween()",
			"\ttween.tween_property(node, ^\"${3:modulate}\", ${4:Color.BLACK}, duration)$0",
			"\treturn tween\n\n"
		],
		"description": "A function for creating a customizable animation at runtime."
	},
	
	"Experimental Tag": {
		"prefix": "@experimental",
		"body": ["## @experimental$0"],
		"description": "Adds a comment to mark a script, method or property as experimental."
	},

	"GDScript File Template": {
  	  "isFileTemplate": true,
		"scope": "gdscript",
		"prefix": "gdTemplate",
		"body": [
        	"## Description"
    	],
    	"description": "A template for new GDScript files."
	},
}